<html><head><title>Notification</title><link href="styles/default.css" type="text/css" rel="stylesheet"/></head><body><div class="header"> </div><br class="clear"/><div class="navigation"><ul><li><a href="index.htm">Documentation</a></li></ul><ul><li><a class="" href="4294967296-PureMVC.Patterns.Observer.htm">PureMVC.Patterns.Observer</a><ul><li><a class="current" href="4294967350.htm">Notification</a><ul><li><a class="" href="4294967350-Constructors.htm">Constructors</a></li><li><a class="" href="4294967350-Methods.htm">Methods</a></li><li><a class="" href="4294967350-Properties.htm">Properties</a></li></ul></li></ul></li></ul></div><div class="content"><h1>Notification Class</h1><div class="summary">A base <span class="code">INotification</span> implementation. </div><div class="inheritance"><h2>Inheritance Hierarchy</h2><ul><li><span>System.Object</span><ul><li><span class="current">PureMVC.Patterns.Observer.Notification</span></li></ul></li></ul></div><div class="details"><span class="namespace"><em>Namespace:</em> <a href="4294967296-PureMVC.Patterns.Observer.htm">PureMVC.Patterns.Observer</a></span><span class="assembly"><em>Assembly:</em> PureMVC in (PureMVC.dll)
								</span></div>
        <div class="syntax">
            <h2>Syntax</h2>
            <pre><span class="keyword">public</span> <span class="keyword">class</span> Notification : INotification</pre>
        </div>
    <p>
				The Notification type exposes the following members.
			</p><h2>Constructors</h2><table><thead><tr><th class="icon"/><th>Class</th><th>Summary</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_constructor.png" alt="public constructor"/></td><td><a href="4294967351.htm">Notification(String, Object, String)</a></td><td><div class="summary">Constructor. </div></td></tr></tbody></table><h2>Methods</h2><table><thead><tr><th class="icon"/><th>Name</th><th>Summary</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_method.png" alt="public method"/></td><td><a href="4294967355.htm">ToString()</a></td><td><div class="summary">Get the string representation of the <span class="code">Notification</span> instance. </div></td></tr></tbody></table><h2>Properties</h2><table><thead><tr><th class="icon"/><th>Name</th><th>Summary</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_properties.png" alt="public properties"/></td><td><a href="4294976262.htm">Body</a></td><td><div class="summary">the body of the notification instance</div></td></tr><tr><td><img src="styles/images/vsobject_properties.png" alt="public properties"/></td><td><a href="4294976256.htm">Name</a></td><td><div class="summary">the name of the notification instance</div></td></tr><tr><td><img src="styles/images/vsobject_properties.png" alt="public properties"/></td><td><a href="4294976268.htm">Type</a></td><td><div class="summary">the type of the notification instance</div></td></tr></tbody></table><div class="remarks"><h2>Remarks</h2><p>PureMVC does not rely upon underlying event models such  as the one provided with Flash, and ActionScript 3 does  not have an inherent event model. </p><p>The Observer Pattern as implemented within PureMVC exists  to support event-driven communication between the  application and the actors of the MVC triad. </p><p>Notifications are not meant to be a replacement for Events in Flex/Flash/Apollo. Generally, <span class="code">IMediator</span> implementors place event listeners on their view components, which they then handle in the usual way. This may lead to the broadcast of <span class="code">Notification</span>s to  trigger <span class="code">ICommand</span>s or to communicate with other <span class="code">IMediators</span>.  <span class="code">IProxy</span> and <span class="code">ICommand</span>instances communicate with each other and <span class="code">IMediator</span>s by broadcasting <span class="code">INotification</span>s. </p><p>A key difference between Flash <span class="code">Event</span>s and PureMVC <span class="code">Notification</span>s is that <span class="code">Event</span>s follow the  'Chain of Responsibility' pattern, 'bubbling' up the display hierarchy  until some parent component handles the <span class="code">Event</span>, while PureMVC <span class="code">Notification</span>s follow a 'Publish/Subscribe' pattern. PureMVC classes need not be related to each other in a  parent/child relationship in order to communicate with one another using <span class="code">Notification</span>s. </p></div><div class="seealso"><h2>See also</h2><div><a href="4294967381.htm">Observer</a></div></div></div><div class="footer">
			Produced by the <a href="http://theboxsoftware.com/products/live-documenter/">Live Documenter</a> developed by <a href="http://theboxsoftware.com">The Box Software</a>.
		</div></body></html>