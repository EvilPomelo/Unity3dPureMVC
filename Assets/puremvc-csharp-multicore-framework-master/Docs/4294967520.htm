<html><head><title>IMediator</title><link href="styles/default.css" type="text/css" rel="stylesheet"/></head><body><div class="header"> </div><br class="clear"/><div class="navigation"><ul><li><a href="index.htm">Documentation</a></li></ul><ul><li><a class="" href="4294967296-PureMVC.Interfaces.htm">PureMVC.Interfaces</a><ul><li><a class="current" href="4294967520.htm">IMediator</a><ul><li><a class="" href="4294967520-Methods.htm">Methods</a></li><li><a class="" href="4294967520-Properties.htm">Properties</a></li></ul></li></ul></li></ul></div><div class="content"><h1>IMediator Interface</h1><div class="summary">The interface definition for a PureMVC Mediator. </div><div class="details"><span class="namespace"><em>Namespace:</em> <a href="4294967296-PureMVC.Interfaces.htm">PureMVC.Interfaces</a></span><span class="assembly"><em>Assembly:</em> PureMVC in (PureMVC.dll)
								</span></div>
        <div class="syntax">
            <h2>Syntax</h2>
            <pre><span class="keyword">public</span> <span class="keyword">interface</span> IMediator : INotifier</pre>
        </div>
    <p>
				The IMediator type exposes the following members.
			</p><h2>Methods</h2><table><thead><tr><th class="icon"/><th>Name</th><th>Summary</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_method.png" alt="public method"/></td><td><a href="4294967526.htm">HandleNotification(INotification)</a></td><td><div class="summary">Handle an <span class="code">INotification</span>. </div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method"/></td><td><a href="4294967525.htm">ListNotificationInterests()</a></td><td><div class="summary">List <span class="code">INotification</span> interests. </div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method"/></td><td><a href="4294967528.htm">OnRegister()</a></td><td><div class="summary">Called by the View when the Mediator is registered </div></td></tr><tr><td><img src="styles/images/vsobject_method.png" alt="public method"/></td><td><a href="4294967529.htm">OnRemove()</a></td><td><div class="summary">Called by the View when the Mediator is removed </div></td></tr></tbody></table><h2>Properties</h2><table><thead><tr><th class="icon"/><th>Name</th><th>Summary</th></tr></thead><tbody><tr><td><img src="styles/images/vsobject_properties.png" alt="public properties"/></td><td><a href="4294975630.htm">MediatorName</a></td><td><div class="summary">Get or Set the <span class="code">IMediator</span> instance name </div></td></tr><tr><td><img src="styles/images/vsobject_properties.png" alt="public properties"/></td><td><a href="4294975636.htm">ViewComponent</a></td><td><div class="summary">Get or Set the <span class="code">IMediator</span>'s view component. </div></td></tr></tbody></table><div class="remarks"><h2>Remarks</h2><p>In PureMVC, <span class="code">IMediator</span> implementors assume these responsibilities: <ul><li>Implement a common method which returns a list of all <span class="code">INotification</span>s the <span class="code">IMediator</span> has interest in.</li><li>Implement a notification callback method.</li><li>Implement methods that are called when the IMediator is registered or removed from the View</li></ul></p><p>Additionally, <span class="code">IMediator</span>s typically: <ul><li>Act as an intermediary between one or more view components such as text boxes or  list controls, maintaining references and coordinating their behavior.</li><li>In Flash-based apps, this is often the place where event listeners are added to view components, and their handlers implemented.</li><li>Respond to and generate <span class="code">INotifications</span>, interacting with of the rest of the PureMVC app.</li></ul></p><p>When an <span class="code">IMediator</span> is registered with the <span class="code">IView</span>,  the <span class="code">IView</span> will call the <span class="code">IMediator</span>'s  <span class="code">listNotificationInterests</span> method. The <span class="code">IMediator</span> will  return an <span class="code">Array</span> of <span class="code">INotification</span> names which  it wishes to be notified about. </p><p>The <span class="code">IView</span> will then create an <span class="code">Observer</span> object  encapsulating that <span class="code">IMediator</span>'s (<span class="code">handleNotification</span>) method and register it as an Observer for each <span class="code">INotification</span> name returned by  <span class="code">listNotificationInterests</span>. </p></div><div class="seealso"><h2>See also</h2><div><a href="4294967539.htm">INotification</a></div></div></div><div class="footer">
			Produced by the <a href="http://theboxsoftware.com/products/live-documenter/">Live Documenter</a> developed by <a href="http://theboxsoftware.com">The Box Software</a>.
		</div></body></html>